(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{402:function(t,e,a){"use strict";a.r(e);var n=a(10),r=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"手写-new-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#手写-new-函数"}},[t._v("#")]),t._v(" 手写 "),a("code",[t._v("new")]),t._v(" 函数")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("new")]),t._v(" 运算符创建一个用户定义的对象类型的实例或具有构造函数的内置对象的实例。\n过程：1. 创建一个对象\n2. 链接该对象到另一个对象 - 即设置该对象的 "),a("code",[t._v("constructor")]),t._v(" 为实例化构造函数\n3. 将 步骤1 新创建的对象作为this的上下文\n4. 如果该函数没有返回对象，则返回this")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Function.prototype.fakeNew(Constructor, ...args) {\n    const obj = Object.create(Constructor.protoType);\n    const res = Constructor.call(obj, ...args);\n    return typeof res === 'object' ? res : obj;\n}\n")])])]),a("h2",{attrs:{id:"手写-call-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#手写-call-函数"}},[t._v("#")]),t._v(" 手写 call 函数")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("all()")]),t._v(" 方法使用一个指定的 this 值和单独给出的一个或多个参数来调用一个函数")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Function.prototype.fakeCall(...args) {\n    const [thisObj，...rest] = args;\n    thisObj.func = this;\n    const res = thisObj.func(...rest);\n    Reflect.deleteProperty(thisObj, 'func');\n    return res;\n}\n")])])]),a("h2",{attrs:{id:"手写-apply-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#手写-apply-函数"}},[t._v("#")]),t._v(" 手写 apply 函数")]),t._v(" "),a("blockquote",[a("p",[t._v("apply() 方法调用一个具有给定this值的函数，以及以一个数组（或类数组对象）的形式提供的参数")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Function.prototype.fakeApply(...args) {\n    const [thisObj, ...rest] = args;\n    thisObj.func = this;\n    const res = thisObj.func(...rest);\n    Reflect.deleteProperty(thisObg, 'func');\n    return res;\n}\n")])])]),a("h2",{attrs:{id:"手写-bind-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#手写-bind-函数"}},[t._v("#")]),t._v(" 手写 bind 函数")]),t._v(" "),a("blockquote",[a("p",[t._v("bind() 方法创建一个新的函数，在 bind() 被调用时，这个新函数的 this 被指定为 bind() 的第一个参数，而其余参数将作为新函数的参数，供调用时使用。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Function.prototype.fakeBind(...args) {\n    const func = this;\n    const [thisObj, ...firstArgs] = args;\n    const res = function (...sedArgs) {\n        return func.apply(this.constructor === func ? this : thisObj, firstArgs.concat(sedArgs));\n    }\n    res.protoType = Object.create(func.protoType);\n    return res;\n}\n")])])]),a("h2",{attrs:{id:"实现类的继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现类的继承"}},[t._v("#")]),t._v(" 实现类的继承")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function Parent() {}\n\nfunction Child(...args) {\n    // 将父类的构造函数绑定在子类上\n    Parent.call(this, ...args);\n}\n// 继承原型上的属性和方法\nChild.protoType = Object.create(Parent.protoType);\n// 将原型构造函数 设置为 当前构造函数\nChild.prototype.constructor = Child;\n\n")])])]),a("h2",{attrs:{id:"深克隆-deepclone"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#深克隆-deepclone"}},[t._v("#")]),t._v(" 深克隆（deepclone）")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function deepClone(param) {\n    if (typeof param !== 'object') return param;\n    const type = Object.protoType.toString.call(param);\n    swtich (type) {\n        // 可以增加其他类型的复制\n        case 'object Array':\n            const res = [];\n            for (let key in param) {\n                res[key] = deepClone(param[key]);\n            }\n            return res;\n        default:\n            const res = {};\n            for (let key in param) {\n                res[key] = deepClone(param[key]);\n            }\n            return res;\n    }\n}\n\n\nJSON.parse(JSON.stringify(data, (item) => {\n    if (typeof item === 'function') {\n        return {\n            type: 'function',\n            source: item.toString();\n        }\n    }\n    return item;\n}), (item) => {\n    if (typeof item === 'object' && item.type === 'function') {\n        return eval(item.toString());\n    }\n    return item;\n}))\n")])])]),a("h2",{attrs:{id:"节流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#节流"}},[t._v("#")]),t._v(" 节流")]),t._v(" "),a("blockquote",[a("p",[t._v("如果一个函数持续的，频繁的触发，那么就让他在一定的时间间隔后触发, 单纯的降低代码执行的频率，保证一段时间内核心代码只执行一次")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function throttle(fn, time) {\n    let timer;\n    return (...args) => {\n        if (timer) {\n            return;\n        }\n        timer = setTimeout(() => {\n            fn(...args);\n        }, time);\n    }\n    \n}\n")])])]),a("h2",{attrs:{id:"防抖"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#防抖"}},[t._v("#")]),t._v(" 防抖")]),t._v(" "),a("blockquote",[a("p",[t._v("触发事件后函数不会立即执行，而是在n秒之后执行，如果n秒之内又触发了事件，则会重新计算函数执行时间。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function debounce(fn, time) {\n    let timer;\n    return (...args) => {\n        if (timer) {\n            clearTimeout(timer);\n        }\n        timer = setTimeout(() => {\n            fn(...args);\n        }, time);\n    }\n}\n")])])]),a("h2",{attrs:{id:"实现instanceof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现instanceof"}},[t._v("#")]),t._v(" 实现instanceOf")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function fakeInstanceOf(child, Parent) {\n    if (Object.getPrototypeOf(Child) === null) return false;\n    return Object.getPrototypeOf(Child) === Parent.protoType;\n}\n")])])]),a("h2",{attrs:{id:"模拟object-create"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模拟object-create"}},[t._v("#")]),t._v(" 模拟Object.create")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function fakeCreate(protoType) {\n    const Fn = function() {};\n    fn.protoType = protoType;\n    return new Fn();\n}\n")])])]),a("h2",{attrs:{id:"实现json-parse"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现json-parse"}},[t._v("#")]),t._v(" 实现JSON.parse")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('function parse(json) {\n   return eval("(" + json + ")");\n}\n')])])]),a("h2",{attrs:{id:"实现-json-stringify"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现-json-stringify"}},[t._v("#")]),t._v(" 实现 JSON.stringify")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function stringify(data) {\n    if (typeof data !== 'object') {\n        return '' + data;\n    }\n\n    const type = Object.protoType.toString.call(param);\n    swtich (type) {\n        // 可以增加其他类型的stringify\n        case 'object Array':\n            let res = `[`;\n            for (let key in param) {\n                res = res + stringify(param[key]) + ',';\n            }\n            return res + ']';\n        default:\n            let res = `{`;\n            for (let key in param) {\n                res = res + `${key}:` + stringify(param[key]) + ',';\n            }\n            return res + '}';\n    }\n}\n")])])]),a("h2",{attrs:{id:"ajax"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ajax"}},[t._v("#")]),t._v(" AJAX")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function axios(url) {\n    const xhr = XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject('Mscrosoft.XMLHttp')\n    xhr.open('GET', url, false); \n    xhr.setRequestHeader('Accept', 'application/json'); \n    xhr.onReadState = (e) => {\n        if (xhr.readyState == 4) {  //监听readyState状态\n            if (xhr.state == 200 || xhr.status == 0) {  //监听HTTP状态码\n                var info = xhr.responseText;\n                var o = eval(\"(\" + info + \")\");  //调用eval()把字符串转换为本地脚本\n                console.log(info);  //显示JSON对象字符串\n                console.log(o.user);  //读取对象属性值，返回字符串“css8”\n            }\n        }\n    }\n    xhr.send();\n}\n\n")])])]),a("h2",{attrs:{id:"解析-url-params-为对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解析-url-params-为对象"}},[t._v("#")]),t._v(" 解析 URL Params 为对象")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function parseParams(url) {\n    const query = url.split('?')[1];\n    return query.split('&').reduce((r, item) => {\n        const [key, value] = item.split('=');\n        return {\n            ...r,\n            [key]: value,\n        }\n    }, {})\n}\n")])])]),a("h2",{attrs:{id:"实现千位分隔符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现千位分隔符"}},[t._v("#")]),t._v(" 实现千位分隔符")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function thousands() {\n  const str = num + '';\n  return str.split(\"\").reverse().reduce((prev, next, index) => {\n    return ((index % 3) ? next : (next + ',')) + prev;\n  })\n}\n")])])]),a("h2",{attrs:{id:"写一个数组去重方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#写一个数组去重方法"}},[t._v("#")]),t._v(" 写一个数组去重方法")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function delRepeat(data) {\n    return Array.from(new Set(data));\n}\n")])])]),a("h2",{attrs:{id:"数组扁平化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组扁平化"}},[t._v("#")]),t._v(" 数组扁平化")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function flat(data) {\n    return data.map(item => {\n        if (item instanceOf Array) {\n            return flat(item);\n        }\n        return item;\n    })\n}\n\n")])])]),a("h2",{attrs:{id:"函数柯里化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数柯里化"}},[t._v("#")]),t._v(" 函数柯里化")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// 题目\nfunction add(a, b, c) { \n    return a + b + c \n} \nadd(1, 2, 3) \nlet addCurry = curry(add) \naddCurry(1)(2)(3) \n// 实现\n\nfunction curry(fn) {\n    const func = (...args) => {\n        if (fn.length === args.length) {\n            return fn(...args);\n        }\n        return (...arg) => func(...args, ...arg);\n    }\n    return func;\n}\n")])])]),a("h2",{attrs:{id:"偏函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#偏函数"}},[t._v("#")]),t._v(" 偏函数")]),t._v(" "),a("p",[t._v("偏函数就是将一个 n 参的函数转换成固定 x 参的函数，剩余参数(n - x)将在下次调用全部传入。举个例子：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// 题目\nfunction add(a, b, c) { \n    return a + b + c \n} \nlet partialAdd = partial(add, 1) \npartialAdd(2, 3) \n// 实现\nfunction partial(fn, ...args) {\n    return (...params) => {\n        return fn(...args, ...params);\n    }\n}\n")])])])])}),[],!1,null,null,null);e.default=r.exports}}]);